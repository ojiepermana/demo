(self.webpackChunkauth_etos=self.webpackChunkauth_etos||[]).push([[3023,4516],{4516:(F,m,r)=>{r.r(m),r.d(m,{MAT_INPUT_VALUE_ACCESSOR:()=>g,MatInput:()=>A,MatInputModule:()=>S,getMatInputUnsupportedTypeError:()=>I});var h=r(2552),_=r(6567),f=r(4029),t=r(5247),l=r(2637),o=r(1682),d=r(9297),v=r(4946);function I(s){return Error(`Input type "${s}" isn't supported by matInput.`)}const g=new t.InjectionToken("MAT_INPUT_VALUE_ACCESSOR"),M=["button","checkbox","file","hidden","image","radio","range","reset","submit"];let C=0;const b=(0,o.mixinErrorState)(class{constructor(s,P,e,n){this._defaultErrorStateMatcher=s,this._parentForm=P,this._parentFormGroup=e,this.ngControl=n,this.stateChanges=new v.Subject}});let A=(()=>{class s extends b{get disabled(){return this._disabled}set disabled(e){this._disabled=(0,h.coerceBooleanProperty)(e),this.focused&&(this.focused=!1,this.stateChanges.next())}get id(){return this._id}set id(e){this._id=e||this._uid}get required(){return this._required??this.ngControl?.control?.hasValidator(l.Validators.required)??!1}set required(e){this._required=(0,h.coerceBooleanProperty)(e)}get type(){return this._type}set type(e){this._type=e||"text",this._validateType(),!this._isTextarea&&(0,_.getSupportedInputTypes)().has(this._type)&&(this._elementRef.nativeElement.type=this._type)}get value(){return this._inputValueAccessor.value}set value(e){e!==this.value&&(this._inputValueAccessor.value=e,this.stateChanges.next())}get readonly(){return this._readonly}set readonly(e){this._readonly=(0,h.coerceBooleanProperty)(e)}constructor(e,n,i,u,T,D,O,R,N,y){super(D,u,T,i),this._elementRef=e,this._platform=n,this._autofillMonitor=R,this._formField=y,this._uid="mat-input-"+C++,this.focused=!1,this.stateChanges=new v.Subject,this.controlType="mat-input",this.autofilled=!1,this._disabled=!1,this._type="text",this._readonly=!1,this._neverEmptyInputTypes=["date","datetime","datetime-local","month","time","week"].filter(p=>(0,_.getSupportedInputTypes)().has(p)),this._iOSKeyupListener=p=>{const a=p.target;!a.value&&0===a.selectionStart&&0===a.selectionEnd&&(a.setSelectionRange(1,1),a.setSelectionRange(0,0))};const c=this._elementRef.nativeElement,E=c.nodeName.toLowerCase();this._inputValueAccessor=O||c,this._previousNativeValue=this.value,this.id=this.id,n.IOS&&N.runOutsideAngular(()=>{e.nativeElement.addEventListener("keyup",this._iOSKeyupListener)}),this._isServer=!this._platform.isBrowser,this._isNativeSelect="select"===E,this._isTextarea="textarea"===E,this._isInFormField=!!y,this._isNativeSelect&&(this.controlType=c.multiple?"mat-native-select-multiple":"mat-native-select")}ngAfterViewInit(){this._platform.isBrowser&&this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(e=>{this.autofilled=e.isAutofilled,this.stateChanges.next()})}ngOnChanges(){this.stateChanges.next()}ngOnDestroy(){this.stateChanges.complete(),this._platform.isBrowser&&this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement),this._platform.IOS&&this._elementRef.nativeElement.removeEventListener("keyup",this._iOSKeyupListener)}ngDoCheck(){this.ngControl&&(this.updateErrorState(),null!==this.ngControl.disabled&&this.ngControl.disabled!==this.disabled&&(this.disabled=this.ngControl.disabled,this.stateChanges.next())),this._dirtyCheckNativeValue(),this._dirtyCheckPlaceholder()}focus(e){this._elementRef.nativeElement.focus(e)}_focusChanged(e){e!==this.focused&&(this.focused=e,this.stateChanges.next())}_onInput(){}_dirtyCheckNativeValue(){const e=this._elementRef.nativeElement.value;this._previousNativeValue!==e&&(this._previousNativeValue=e,this.stateChanges.next())}_dirtyCheckPlaceholder(){const e=this._getPlaceholder();if(e!==this._previousPlaceholder){const n=this._elementRef.nativeElement;this._previousPlaceholder=e,e?n.setAttribute("placeholder",e):n.removeAttribute("placeholder")}}_getPlaceholder(){return this.placeholder||null}_validateType(){M.indexOf(this._type)}_isNeverEmpty(){return this._neverEmptyInputTypes.indexOf(this._type)>-1}_isBadInput(){let e=this._elementRef.nativeElement.validity;return e&&e.badInput}get empty(){return!(this._isNeverEmpty()||this._elementRef.nativeElement.value||this._isBadInput()||this.autofilled)}get shouldLabelFloat(){if(this._isNativeSelect){const e=this._elementRef.nativeElement,n=e.options[0];return this.focused||e.multiple||!this.empty||!!(e.selectedIndex>-1&&n&&n.label)}return this.focused||!this.empty}setDescribedByIds(e){e.length?this._elementRef.nativeElement.setAttribute("aria-describedby",e.join(" ")):this._elementRef.nativeElement.removeAttribute("aria-describedby")}onContainerClick(){this.focused||this.focus()}_isInlineSelect(){const e=this._elementRef.nativeElement;return this._isNativeSelect&&(e.multiple||e.size>1)}static#e=this.\u0275fac=function(n){return new(n||s)(t.\u0275\u0275directiveInject(t.ElementRef),t.\u0275\u0275directiveInject(_.Platform),t.\u0275\u0275directiveInject(l.NgControl,10),t.\u0275\u0275directiveInject(l.NgForm,8),t.\u0275\u0275directiveInject(l.FormGroupDirective,8),t.\u0275\u0275directiveInject(o.ErrorStateMatcher),t.\u0275\u0275directiveInject(g,10),t.\u0275\u0275directiveInject(f.AutofillMonitor),t.\u0275\u0275directiveInject(t.NgZone),t.\u0275\u0275directiveInject(d.MAT_FORM_FIELD,8))};static#t=this.\u0275dir=t.\u0275\u0275defineDirective({type:s,selectors:[["input","matInput",""],["textarea","matInput",""],["select","matNativeControl",""],["input","matNativeControl",""],["textarea","matNativeControl",""]],hostAttrs:[1,"mat-mdc-input-element"],hostVars:18,hostBindings:function(n,i){1&n&&t.\u0275\u0275listener("focus",function(){return i._focusChanged(!0)})("blur",function(){return i._focusChanged(!1)})("input",function(){return i._onInput()}),2&n&&(t.\u0275\u0275hostProperty("id",i.id)("disabled",i.disabled)("required",i.required),t.\u0275\u0275attribute("name",i.name||null)("readonly",i.readonly&&!i._isNativeSelect||null)("aria-invalid",i.empty&&i.required?null:i.errorState)("aria-required",i.required)("id",i.id),t.\u0275\u0275classProp("mat-input-server",i._isServer)("mat-mdc-form-field-textarea-control",i._isInFormField&&i._isTextarea)("mat-mdc-form-field-input-control",i._isInFormField)("mdc-text-field__input",i._isInFormField)("mat-mdc-native-select-inline",i._isInlineSelect()))},inputs:{disabled:"disabled",id:"id",placeholder:"placeholder",name:"name",required:"required",type:"type",errorStateMatcher:"errorStateMatcher",userAriaDescribedBy:["aria-describedby","userAriaDescribedBy"],value:"value",readonly:"readonly"},exportAs:["matInput"],features:[t.\u0275\u0275ProvidersFeature([{provide:d.MatFormFieldControl,useExisting:s}]),t.\u0275\u0275InheritDefinitionFeature,t.\u0275\u0275NgOnChangesFeature]})}return s})(),S=(()=>{class s{static#e=this.\u0275fac=function(n){return new(n||s)};static#t=this.\u0275mod=t.\u0275\u0275defineNgModule({type:s});static#i=this.\u0275inj=t.\u0275\u0275defineInjector({imports:[o.MatCommonModule,d.MatFormFieldModule,d.MatFormFieldModule,f.TextFieldModule,o.MatCommonModule]})}return s})()}}]);